# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Home
_M_Home = Ice.openModule('Home')
__name__ = 'Home'

if 'UnknownException' not in _M_Home.__dict__:
    _M_Home.UnknownException = Ice.createTempClass()
    class UnknownException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::UnknownException'

    _M_Home._t_UnknownException = IcePy.defineException('::Home::UnknownException', UnknownException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnknownException._ice_type = _M_Home._t_UnknownException

    _M_Home.UnknownException = UnknownException
    del UnknownException

if 'PowerState' not in _M_Home.__dict__:
    _M_Home.PowerState = Ice.createTempClass()
    class PowerState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    PowerState.ON = PowerState("ON", 0)
    PowerState.OFF = PowerState("OFF", 1)
    PowerState._enumerators = { 0:PowerState.ON, 1:PowerState.OFF }

    _M_Home._t_PowerState = IcePy.defineEnum('::Home::PowerState', PowerState, (), PowerState._enumerators)

    _M_Home.PowerState = PowerState
    del PowerState

_M_Home._t_Device = IcePy.defineValue('::Home::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Home.__dict__:
    _M_Home.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getPowerState(self, context=None):
            return _M_Home.Device._op_getPowerState.invoke(self, ((), context))

        def getPowerStateAsync(self, context=None):
            return _M_Home.Device._op_getPowerState.invokeAsync(self, ((), context))

        def begin_getPowerState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_getPowerState.begin(self, ((), _response, _ex, _sent, context))

        def end_getPowerState(self, _r):
            return _M_Home.Device._op_getPowerState.end(self, _r)

        def setPowerState(self, powerState, context=None):
            return _M_Home.Device._op_setPowerState.invoke(self, ((powerState, ), context))

        def setPowerStateAsync(self, powerState, context=None):
            return _M_Home.Device._op_setPowerState.invokeAsync(self, ((powerState, ), context))

        def begin_setPowerState(self, powerState, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_setPowerState.begin(self, ((powerState, ), _response, _ex, _sent, context))

        def end_setPowerState(self, _r):
            return _M_Home.Device._op_setPowerState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DevicePrx.ice_checkedCast(proxy, '::Home::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Device'
    _M_Home._t_DevicePrx = IcePy.defineProxy('::Home::Device', DevicePrx)

    _M_Home.DevicePrx = DevicePrx
    del DevicePrx

    _M_Home.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Device'

        @staticmethod
        def ice_staticId():
            return '::Home::Device'

        def getPowerState(self, current=None):
            raise NotImplementedError("servant method 'getPowerState' not implemented")

        def setPowerState(self, powerState, current=None):
            raise NotImplementedError("servant method 'setPowerState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceDisp)

        __repr__ = __str__

    _M_Home._t_DeviceDisp = IcePy.defineClass('::Home::Device', Device, (), None, ())
    Device._ice_type = _M_Home._t_DeviceDisp

    Device._op_getPowerState = IcePy.Operation('getPowerState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_PowerState, False, 0), ())
    Device._op_setPowerState = IcePy.Operation('setPowerState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_PowerState, False, 0),), (), None, ())

    _M_Home.Device = Device
    del Device

if 'LightIntensity' not in _M_Home.__dict__:
    _M_Home.LightIntensity = Ice.createTempClass()
    class LightIntensity(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LightIntensity.LOW = LightIntensity("LOW", 0)
    LightIntensity.MEDIUM = LightIntensity("MEDIUM", 1)
    LightIntensity.HIGH = LightIntensity("HIGH", 2)
    LightIntensity._enumerators = { 0:LightIntensity.LOW, 1:LightIntensity.MEDIUM, 2:LightIntensity.HIGH }

    _M_Home._t_LightIntensity = IcePy.defineEnum('::Home::LightIntensity', LightIntensity, (), LightIntensity._enumerators)

    _M_Home.LightIntensity = LightIntensity
    del LightIntensity

if 'UnknownLightIntensity' not in _M_Home.__dict__:
    _M_Home.UnknownLightIntensity = Ice.createTempClass()
    class UnknownLightIntensity(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::UnknownLightIntensity'

    _M_Home._t_UnknownLightIntensity = IcePy.defineException('::Home::UnknownLightIntensity', UnknownLightIntensity, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnknownLightIntensity._ice_type = _M_Home._t_UnknownLightIntensity

    _M_Home.UnknownLightIntensity = UnknownLightIntensity
    del UnknownLightIntensity

_M_Home._t_Light = IcePy.defineValue('::Home::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_Home.__dict__:
    _M_Home.LightPrx = Ice.createTempClass()
    class LightPrx(_M_Home.DevicePrx):

        def getIntensity(self, context=None):
            return _M_Home.Light._op_getIntensity.invoke(self, ((), context))

        def getIntensityAsync(self, context=None):
            return _M_Home.Light._op_getIntensity.invokeAsync(self, ((), context))

        def begin_getIntensity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_getIntensity.begin(self, ((), _response, _ex, _sent, context))

        def end_getIntensity(self, _r):
            return _M_Home.Light._op_getIntensity.end(self, _r)

        def setIntensity(self, intensity, context=None):
            return _M_Home.Light._op_setIntensity.invoke(self, ((intensity, ), context))

        def setIntensityAsync(self, intensity, context=None):
            return _M_Home.Light._op_setIntensity.invokeAsync(self, ((intensity, ), context))

        def begin_setIntensity(self, intensity, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_setIntensity.begin(self, ((intensity, ), _response, _ex, _sent, context))

        def end_setIntensity(self, _r):
            return _M_Home.Light._op_setIntensity.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.LightPrx.ice_checkedCast(proxy, '::Home::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Light'
    _M_Home._t_LightPrx = IcePy.defineProxy('::Home::Light', LightPrx)

    _M_Home.LightPrx = LightPrx
    del LightPrx

    _M_Home.Light = Ice.createTempClass()
    class Light(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Light'

        @staticmethod
        def ice_staticId():
            return '::Home::Light'

        def getIntensity(self, current=None):
            raise NotImplementedError("servant method 'getIntensity' not implemented")

        def setIntensity(self, intensity, current=None):
            raise NotImplementedError("servant method 'setIntensity' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_LightDisp)

        __repr__ = __str__

    _M_Home._t_LightDisp = IcePy.defineClass('::Home::Light', Light, (), None, (_M_Home._t_DeviceDisp,))
    Light._ice_type = _M_Home._t_LightDisp

    Light._op_getIntensity = IcePy.Operation('getIntensity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_LightIntensity, False, 0), ())
    Light._op_setIntensity = IcePy.Operation('setIntensity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_LightIntensity, False, 0),), (), None, (_M_Home._t_UnknownLightIntensity,))

    _M_Home.Light = Light
    del Light

if 'LightColor' not in _M_Home.__dict__:
    _M_Home.LightColor = Ice.createTempClass()
    class LightColor(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LightColor.RED = LightColor("RED", 0)
    LightColor.BLUE = LightColor("BLUE", 1)
    LightColor.GREEN = LightColor("GREEN", 2)
    LightColor._enumerators = { 0:LightColor.RED, 1:LightColor.BLUE, 2:LightColor.GREEN }

    _M_Home._t_LightColor = IcePy.defineEnum('::Home::LightColor', LightColor, (), LightColor._enumerators)

    _M_Home.LightColor = LightColor
    del LightColor

if 'UnknownLightColor' not in _M_Home.__dict__:
    _M_Home.UnknownLightColor = Ice.createTempClass()
    class UnknownLightColor(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::UnknownLightColor'

    _M_Home._t_UnknownLightColor = IcePy.defineException('::Home::UnknownLightColor', UnknownLightColor, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnknownLightColor._ice_type = _M_Home._t_UnknownLightColor

    _M_Home.UnknownLightColor = UnknownLightColor
    del UnknownLightColor

_M_Home._t_ColoredLight = IcePy.defineValue('::Home::ColoredLight', Ice.Value, -1, (), False, True, None, ())

if 'ColoredLightPrx' not in _M_Home.__dict__:
    _M_Home.ColoredLightPrx = Ice.createTempClass()
    class ColoredLightPrx(_M_Home.LightPrx):

        def getColor(self, context=None):
            return _M_Home.ColoredLight._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_Home.ColoredLight._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.ColoredLight._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_Home.ColoredLight._op_getColor.end(self, _r)

        def setColor(self, color, context=None):
            return _M_Home.ColoredLight._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_Home.ColoredLight._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.ColoredLight._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_Home.ColoredLight._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.ColoredLightPrx.ice_checkedCast(proxy, '::Home::ColoredLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.ColoredLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::ColoredLight'
    _M_Home._t_ColoredLightPrx = IcePy.defineProxy('::Home::ColoredLight', ColoredLightPrx)

    _M_Home.ColoredLightPrx = ColoredLightPrx
    del ColoredLightPrx

    _M_Home.ColoredLight = Ice.createTempClass()
    class ColoredLight(_M_Home.Light):

        def ice_ids(self, current=None):
            return ('::Home::ColoredLight', '::Home::Device', '::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::ColoredLight'

        @staticmethod
        def ice_staticId():
            return '::Home::ColoredLight'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_ColoredLightDisp)

        __repr__ = __str__

    _M_Home._t_ColoredLightDisp = IcePy.defineClass('::Home::ColoredLight', ColoredLight, (), None, (_M_Home._t_LightDisp,))
    ColoredLight._ice_type = _M_Home._t_ColoredLightDisp

    ColoredLight._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_LightColor, False, 0), ())
    ColoredLight._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_LightColor, False, 0),), (), None, (_M_Home._t_UnknownLightColor,))

    _M_Home.ColoredLight = ColoredLight
    del ColoredLight

if 'LightDirection' not in _M_Home.__dict__:
    _M_Home.LightDirection = Ice.createTempClass()
    class LightDirection(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LightDirection.NORTH = LightDirection("NORTH", 0)
    LightDirection.SOUTH = LightDirection("SOUTH", 1)
    LightDirection.EAST = LightDirection("EAST", 2)
    LightDirection.WEST = LightDirection("WEST", 3)
    LightDirection._enumerators = { 0:LightDirection.NORTH, 1:LightDirection.SOUTH, 2:LightDirection.EAST, 3:LightDirection.WEST }

    _M_Home._t_LightDirection = IcePy.defineEnum('::Home::LightDirection', LightDirection, (), LightDirection._enumerators)

    _M_Home.LightDirection = LightDirection
    del LightDirection

if 'UnknownLightDirection' not in _M_Home.__dict__:
    _M_Home.UnknownLightDirection = Ice.createTempClass()
    class UnknownLightDirection(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::UnknownLightDirection'

    _M_Home._t_UnknownLightDirection = IcePy.defineException('::Home::UnknownLightDirection', UnknownLightDirection, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnknownLightDirection._ice_type = _M_Home._t_UnknownLightDirection

    _M_Home.UnknownLightDirection = UnknownLightDirection
    del UnknownLightDirection

_M_Home._t_DirectedLight = IcePy.defineValue('::Home::DirectedLight', Ice.Value, -1, (), False, True, None, ())

if 'DirectedLightPrx' not in _M_Home.__dict__:
    _M_Home.DirectedLightPrx = Ice.createTempClass()
    class DirectedLightPrx(_M_Home.LightPrx):

        def getDirection(self, context=None):
            return _M_Home.DirectedLight._op_getDirection.invoke(self, ((), context))

        def getDirectionAsync(self, context=None):
            return _M_Home.DirectedLight._op_getDirection.invokeAsync(self, ((), context))

        def begin_getDirection(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.DirectedLight._op_getDirection.begin(self, ((), _response, _ex, _sent, context))

        def end_getDirection(self, _r):
            return _M_Home.DirectedLight._op_getDirection.end(self, _r)

        def setDirection(self, direction, context=None):
            return _M_Home.DirectedLight._op_setDirection.invoke(self, ((direction, ), context))

        def setDirectionAsync(self, direction, context=None):
            return _M_Home.DirectedLight._op_setDirection.invokeAsync(self, ((direction, ), context))

        def begin_setDirection(self, direction, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.DirectedLight._op_setDirection.begin(self, ((direction, ), _response, _ex, _sent, context))

        def end_setDirection(self, _r):
            return _M_Home.DirectedLight._op_setDirection.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DirectedLightPrx.ice_checkedCast(proxy, '::Home::DirectedLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DirectedLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::DirectedLight'
    _M_Home._t_DirectedLightPrx = IcePy.defineProxy('::Home::DirectedLight', DirectedLightPrx)

    _M_Home.DirectedLightPrx = DirectedLightPrx
    del DirectedLightPrx

    _M_Home.DirectedLight = Ice.createTempClass()
    class DirectedLight(_M_Home.Light):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::DirectedLight', '::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::DirectedLight'

        @staticmethod
        def ice_staticId():
            return '::Home::DirectedLight'

        def getDirection(self, current=None):
            raise NotImplementedError("servant method 'getDirection' not implemented")

        def setDirection(self, direction, current=None):
            raise NotImplementedError("servant method 'setDirection' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DirectedLightDisp)

        __repr__ = __str__

    _M_Home._t_DirectedLightDisp = IcePy.defineClass('::Home::DirectedLight', DirectedLight, (), None, (_M_Home._t_LightDisp,))
    DirectedLight._ice_type = _M_Home._t_DirectedLightDisp

    DirectedLight._op_getDirection = IcePy.Operation('getDirection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_LightDirection, False, 0), ())
    DirectedLight._op_setDirection = IcePy.Operation('setDirection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_LightDirection, False, 0),), (), None, (_M_Home._t_UnknownLightDirection,))

    _M_Home.DirectedLight = DirectedLight
    del DirectedLight

if 'DoorState' not in _M_Home.__dict__:
    _M_Home.DoorState = Ice.createTempClass()
    class DoorState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DoorState.OPEN = DoorState("OPEN", 0)
    DoorState.CLOSED = DoorState("CLOSED", 1)
    DoorState._enumerators = { 0:DoorState.OPEN, 1:DoorState.CLOSED }

    _M_Home._t_DoorState = IcePy.defineEnum('::Home::DoorState', DoorState, (), DoorState._enumerators)

    _M_Home.DoorState = DoorState
    del DoorState

if 'UnknownDoorState' not in _M_Home.__dict__:
    _M_Home.UnknownDoorState = Ice.createTempClass()
    class UnknownDoorState(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::UnknownDoorState'

    _M_Home._t_UnknownDoorState = IcePy.defineException('::Home::UnknownDoorState', UnknownDoorState, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnknownDoorState._ice_type = _M_Home._t_UnknownDoorState

    _M_Home.UnknownDoorState = UnknownDoorState
    del UnknownDoorState

_M_Home._t_Door = IcePy.defineValue('::Home::Door', Ice.Value, -1, (), False, True, None, ())

if 'DoorPrx' not in _M_Home.__dict__:
    _M_Home.DoorPrx = Ice.createTempClass()
    class DoorPrx(_M_Home.DevicePrx):

        def getState(self, context=None):
            return _M_Home.Door._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_Home.Door._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Door._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_Home.Door._op_getState.end(self, _r)

        def setState(self, state, context=None):
            return _M_Home.Door._op_setState.invoke(self, ((state, ), context))

        def setStateAsync(self, state, context=None):
            return _M_Home.Door._op_setState.invokeAsync(self, ((state, ), context))

        def begin_setState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Door._op_setState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_Home.Door._op_setState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DoorPrx.ice_checkedCast(proxy, '::Home::Door', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DoorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Door'
    _M_Home._t_DoorPrx = IcePy.defineProxy('::Home::Door', DoorPrx)

    _M_Home.DoorPrx = DoorPrx
    del DoorPrx

    _M_Home.Door = Ice.createTempClass()
    class Door(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::Door', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Door'

        @staticmethod
        def ice_staticId():
            return '::Home::Door'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def setState(self, state, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DoorDisp)

        __repr__ = __str__

    _M_Home._t_DoorDisp = IcePy.defineClass('::Home::Door', Door, (), None, (_M_Home._t_DeviceDisp,))
    Door._ice_type = _M_Home._t_DoorDisp

    Door._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_DoorState, False, 0), ())
    Door._op_setState = IcePy.Operation('setState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_DoorState, False, 0),), (), None, (_M_Home._t_UnknownDoorState,))

    _M_Home.Door = Door
    del Door

_M_Home._t_Thermostat = IcePy.defineValue('::Home::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_Home.__dict__:
    _M_Home.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(_M_Home.DevicePrx):

        def getTemperature(self, context=None):
            return _M_Home.Thermostat._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_Home.Thermostat._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Thermostat._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Home.Thermostat._op_getTemperature.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_Home.Thermostat._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_Home.Thermostat._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Thermostat._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Home.Thermostat._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.ThermostatPrx.ice_checkedCast(proxy, '::Home::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Thermostat'
    _M_Home._t_ThermostatPrx = IcePy.defineProxy('::Home::Thermostat', ThermostatPrx)

    _M_Home.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_Home.Thermostat = Ice.createTempClass()
    class Thermostat(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::Thermostat', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::Home::Thermostat'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_ThermostatDisp)

        __repr__ = __str__

    _M_Home._t_ThermostatDisp = IcePy.defineClass('::Home::Thermostat', Thermostat, (), None, (_M_Home._t_DeviceDisp,))
    Thermostat._ice_type = _M_Home._t_ThermostatDisp

    Thermostat._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Thermostat._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Home._t_UnknownException,))

    _M_Home.Thermostat = Thermostat
    del Thermostat

# End of module Home
