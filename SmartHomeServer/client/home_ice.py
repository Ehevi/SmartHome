# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Home
_M_Home = Ice.openModule('Home')
__name__ = 'Home'

if 'HomeStaffStateException' not in _M_Home.__dict__:
    _M_Home.HomeStaffStateException = Ice.createTempClass()
    class HomeStaffStateException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::HomeStaffStateException'

    _M_Home._t_HomeStaffStateException = IcePy.defineException('::Home::HomeStaffStateException', HomeStaffStateException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    HomeStaffStateException._ice_type = _M_Home._t_HomeStaffStateException

    _M_Home.HomeStaffStateException = HomeStaffStateException
    del HomeStaffStateException

if 'PowerState' not in _M_Home.__dict__:
    _M_Home.PowerState = Ice.createTempClass()
    class PowerState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    PowerState.ON = PowerState("ON", 0)
    PowerState.OFF = PowerState("OFF", 1)
    PowerState._enumerators = { 0:PowerState.ON, 1:PowerState.OFF }

    _M_Home._t_PowerState = IcePy.defineEnum('::Home::PowerState', PowerState, (), PowerState._enumerators)

    _M_Home.PowerState = PowerState
    del PowerState

_M_Home._t_Device = IcePy.defineValue('::Home::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Home.__dict__:
    _M_Home.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getPowerState(self, context=None):
            return _M_Home.Device._op_getPowerState.invoke(self, ((), context))

        def getPowerStateAsync(self, context=None):
            return _M_Home.Device._op_getPowerState.invokeAsync(self, ((), context))

        def begin_getPowerState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_getPowerState.begin(self, ((), _response, _ex, _sent, context))

        def end_getPowerState(self, _r):
            return _M_Home.Device._op_getPowerState.end(self, _r)

        def setPowerState(self, powerState, context=None):
            return _M_Home.Device._op_setPowerState.invoke(self, ((powerState, ), context))

        def setPowerStateAsync(self, powerState, context=None):
            return _M_Home.Device._op_setPowerState.invokeAsync(self, ((powerState, ), context))

        def begin_setPowerState(self, powerState, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_setPowerState.begin(self, ((powerState, ), _response, _ex, _sent, context))

        def end_setPowerState(self, _r):
            return _M_Home.Device._op_setPowerState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DevicePrx.ice_checkedCast(proxy, '::Home::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Device'
    _M_Home._t_DevicePrx = IcePy.defineProxy('::Home::Device', DevicePrx)

    _M_Home.DevicePrx = DevicePrx
    del DevicePrx

    _M_Home.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Device'

        @staticmethod
        def ice_staticId():
            return '::Home::Device'

        def getPowerState(self, current=None):
            raise NotImplementedError("servant method 'getPowerState' not implemented")

        def setPowerState(self, powerState, current=None):
            raise NotImplementedError("servant method 'setPowerState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceDisp)

        __repr__ = __str__

    _M_Home._t_DeviceDisp = IcePy.defineClass('::Home::Device', Device, (), None, ())
    Device._ice_type = _M_Home._t_DeviceDisp

    Device._op_getPowerState = IcePy.Operation('getPowerState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_PowerState, False, 0), ())
    Device._op_setPowerState = IcePy.Operation('setPowerState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_PowerState, False, 0),), (), None, ())

    _M_Home.Device = Device
    del Device

_M_Home._t_Light = IcePy.defineValue('::Home::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_Home.__dict__:
    _M_Home.LightPrx = Ice.createTempClass()
    class LightPrx(Ice.ObjectPrx):

        def setBrightness(self, b, context=None):
            return _M_Home.Light._op_setBrightness.invoke(self, ((b, ), context))

        def setBrightnessAsync(self, b, context=None):
            return _M_Home.Light._op_setBrightness.invokeAsync(self, ((b, ), context))

        def begin_setBrightness(self, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_setBrightness.begin(self, ((b, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_Home.Light._op_setBrightness.end(self, _r)

        def getBrightness(self, context=None):
            return _M_Home.Light._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_Home.Light._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_Home.Light._op_getBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.LightPrx.ice_checkedCast(proxy, '::Home::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Light'
    _M_Home._t_LightPrx = IcePy.defineProxy('::Home::Light', LightPrx)

    _M_Home.LightPrx = LightPrx
    del LightPrx

    _M_Home.Light = Ice.createTempClass()
    class Light(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Light'

        @staticmethod
        def ice_staticId():
            return '::Home::Light'

        def setBrightness(self, b, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_LightDisp)

        __repr__ = __str__

    _M_Home._t_LightDisp = IcePy.defineClass('::Home::Light', Light, (), None, ())
    Light._ice_type = _M_Home._t_LightDisp

    Light._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, (_M_Home._t_HomeStaffStateException,))
    Light._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), (_M_Home._t_HomeStaffStateException,))

    _M_Home.Light = Light
    del Light

# End of module Home
